basePath: /
definitions:
  codedeploy.CreateDeploymentInput:
    properties:
      applicationName:
        description: |-
          The name of an CodeDeploy application associated with the user or Amazon Web
          Services account.

          This member is required.
        type: string
      autoRollbackConfiguration:
        allOf:
        - $ref: '#/definitions/types.AutoRollbackConfiguration'
        description: |-
          Configuration information for an automatic rollback that is added when a
          deployment is created.
      deploymentConfigName:
        description: |-
          The name of a deployment configuration associated with the user or Amazon Web
          Services account.

          If not specified, the value configured in the deployment group is used as the
          default. If the deployment group does not have a deployment configuration
          associated with it, CodeDeployDefault . OneAtATime is used by default.
        type: string
      deploymentGroupName:
        description: The name of the deployment group.
        type: string
      description:
        description: A comment about the deployment.
        type: string
      fileExistsBehavior:
        allOf:
        - $ref: '#/definitions/types.FileExistsBehavior'
        description: |-
          Information about how CodeDeploy handles files that already exist in a
          deployment target location but weren't part of the previous successful
          deployment.

          The fileExistsBehavior parameter takes any of the following values:

            - DISALLOW: The deployment fails. This is also the default behavior if no
            option is specified.

            - OVERWRITE: The version of the file from the application revision currently
            being deployed replaces the version already on the instance.

            - RETAIN: The version of the file already on the instance is kept and used as
            part of the new deployment.
      ignoreApplicationStopFailures:
        description: |-
          If true, then if an ApplicationStop , BeforeBlockTraffic , or AfterBlockTraffic
          deployment lifecycle event to an instance fails, then the deployment continues
          to the next deployment lifecycle event. For example, if ApplicationStop fails,
          the deployment continues with DownloadBundle . If BeforeBlockTraffic fails, the
          deployment continues with BlockTraffic . If AfterBlockTraffic fails, the
          deployment continues with ApplicationStop .

          If false or not specified, then if a lifecycle event fails during a deployment
          to an instance, that deployment fails. If deployment to that instance is part of
          an overall deployment and the number of healthy hosts is not less than the
          minimum number of healthy hosts, then a deployment to the next instance is
          attempted.

          During a deployment, the CodeDeploy agent runs the scripts specified for
          ApplicationStop , BeforeBlockTraffic , and AfterBlockTraffic in the AppSpec
          file from the previous successful deployment. (All other scripts are run from
          the AppSpec file in the current deployment.) If one of these scripts contains an
          error and does not run successfully, the deployment can fail.

          If the cause of the failure is a script from the last successful deployment
          that will never run successfully, create a new deployment and use
          ignoreApplicationStopFailures to specify that the ApplicationStop ,
          BeforeBlockTraffic , and AfterBlockTraffic failures should be ignored.
        type: boolean
      overrideAlarmConfiguration:
        allOf:
        - $ref: '#/definitions/types.AlarmConfiguration'
        description: |-
          Allows you to specify information about alarms associated with a deployment.
          The alarm configuration that you specify here will override the alarm
          configuration at the deployment group level. Consider overriding the alarm
          configuration if you have set up alarms at the deployment group level that are
          causing deployment failures. In this case, you would call CreateDeployment to
          create a new deployment that uses a previous application revision that is known
          to work, and set its alarm configuration to turn off alarm polling. Turning off
          alarm polling ensures that the new deployment proceeds without being blocked by
          the alarm that was generated by the previous, failed, deployment.

          If you specify an overrideAlarmConfiguration , you need the
          UpdateDeploymentGroup IAM permission when calling CreateDeployment .
      revision:
        allOf:
        - $ref: '#/definitions/types.RevisionLocation'
        description: The type and location of the revision to deploy.
      targetInstances:
        allOf:
        - $ref: '#/definitions/types.TargetInstances'
        description: |-
          Information about the instances that belong to the replacement environment in
          a blue/green deployment.
      updateOutdatedInstancesOnly:
        description: |-
          Indicates whether to deploy to all instances or only to instances that are not
          running the latest application revision.
        type: boolean
    type: object
  codedeploy.CreateDeploymentOutput:
    properties:
      deploymentId:
        description: The unique ID of a deployment.
        type: string
      resultMetadata:
        allOf:
        - $ref: '#/definitions/middleware.Metadata'
        description: Metadata pertaining to the operation's result.
    type: object
  middleware.Metadata:
    type: object
  types.Alarm:
    properties:
      name:
        description: |-
          The name of the alarm. Maximum length is 255 characters. Each alarm name can be
          used only once in a list of alarms.
        type: string
    type: object
  types.AlarmConfiguration:
    properties:
      alarms:
        description: |-
          A list of alarms configured for the deployment or deployment group. A maximum
          of 10 alarms can be added.
        items:
          $ref: '#/definitions/types.Alarm'
        type: array
      enabled:
        description: Indicates whether the alarm configuration is enabled.
        type: boolean
      ignorePollAlarmFailure:
        description: |-
          Indicates whether a deployment should continue if information about the current
          state of alarms cannot be retrieved from Amazon CloudWatch. The default value is
          false.

            - true : The deployment proceeds even if alarm status information can't be
            retrieved from Amazon CloudWatch.

            - false : The deployment stops if alarm status information can't be retrieved
            from Amazon CloudWatch.
        type: boolean
    type: object
  types.AppSpecContent:
    properties:
      content:
        description: |-
          The YAML-formatted or JSON-formatted revision string.

          For an Lambda deployment, the content includes a Lambda function name, the
          alias for its original version, and the alias for its replacement version. The
          deployment shifts traffic from the original version of the Lambda function to
          the replacement version.

          For an Amazon ECS deployment, the content includes the task name, information
          about the load balancer that serves traffic to the container, and more.

          For both types of deployments, the content can specify Lambda functions that
          run at specified hooks, such as BeforeInstall , during a deployment.
        type: string
      sha256:
        description: The SHA256 hash value of the revision content.
        type: string
    type: object
  types.AutoRollbackConfiguration:
    properties:
      enabled:
        description: |-
          Indicates whether a defined automatic rollback configuration is currently
          enabled.
        type: boolean
      events:
        description: The event type or types that trigger a rollback.
        items:
          $ref: '#/definitions/types.AutoRollbackEvent'
        type: array
    type: object
  types.AutoRollbackEvent:
    enum:
    - DEPLOYMENT_FAILURE
    - DEPLOYMENT_STOP_ON_ALARM
    - DEPLOYMENT_STOP_ON_REQUEST
    type: string
    x-enum-varnames:
    - AutoRollbackEventDeploymentFailure
    - AutoRollbackEventDeploymentStopOnAlarm
    - AutoRollbackEventDeploymentStopOnRequest
  types.BundleType:
    enum:
    - tar
    - tgz
    - zip
    - YAML
    - JSON
    type: string
    x-enum-varnames:
    - BundleTypeTar
    - BundleTypeTarGZip
    - BundleTypeZip
    - BundleTypeYaml
    - BundleTypeJson
  types.EC2TagFilter:
    properties:
      key:
        description: The tag filter key.
        type: string
      type:
        allOf:
        - $ref: '#/definitions/types.EC2TagFilterType'
        description: |-
          The tag filter type:

            - KEY_ONLY : Key only.

            - VALUE_ONLY : Value only.

            - KEY_AND_VALUE : Key and value.
      value:
        description: The tag filter value.
        type: string
    type: object
  types.EC2TagFilterType:
    enum:
    - KEY_ONLY
    - VALUE_ONLY
    - KEY_AND_VALUE
    type: string
    x-enum-varnames:
    - EC2TagFilterTypeKeyOnly
    - EC2TagFilterTypeValueOnly
    - EC2TagFilterTypeKeyAndValue
  types.EC2TagSet:
    properties:
      ec2TagSetList:
        description: |-
          A list that contains other lists of Amazon EC2 instance tag groups. For an
          instance to be included in the deployment group, it must be identified by all of
          the tag groups in the list.
        items:
          items:
            $ref: '#/definitions/types.EC2TagFilter'
          type: array
        type: array
    type: object
  types.FileExistsBehavior:
    enum:
    - DISALLOW
    - OVERWRITE
    - RETAIN
    type: string
    x-enum-varnames:
    - FileExistsBehaviorDisallow
    - FileExistsBehaviorOverwrite
    - FileExistsBehaviorRetain
  types.GitHubLocation:
    properties:
      commitId:
        description: |-
          The SHA1 commit ID of the GitHub commit that represents the bundled artifacts
          for the application revision.
        type: string
      repository:
        description: |-
          The GitHub account and repository pair that stores a reference to the commit
          that represents the bundled artifacts for the application revision.

          Specified as account/repository.
        type: string
    type: object
  types.RawString:
    properties:
      content:
        description: |-
          The YAML-formatted or JSON-formatted revision string. It includes information
          about which Lambda function to update and optional Lambda functions that
          validate deployment lifecycle events.
        type: string
      sha256:
        description: The SHA256 hash value of the revision content.
        type: string
    type: object
  types.RevisionLocation:
    properties:
      appSpecContent:
        allOf:
        - $ref: '#/definitions/types.AppSpecContent'
        description: |-
          The content of an AppSpec file for an Lambda or Amazon ECS deployment. The
          content is formatted as JSON or YAML and stored as a RawString.
      gitHubLocation:
        allOf:
        - $ref: '#/definitions/types.GitHubLocation'
        description: Information about the location of application artifacts stored
          in GitHub.
      revisionType:
        allOf:
        - $ref: '#/definitions/types.RevisionLocationType'
        description: |-
          The type of application revision:

            - S3: An application revision stored in Amazon S3.

            - GitHub: An application revision stored in GitHub (EC2/On-premises
            deployments only).

            - String: A YAML-formatted or JSON-formatted string (Lambda deployments only).

            - AppSpecContent: An AppSpecContent object that contains the contents of an
            AppSpec file for an Lambda or Amazon ECS deployment. The content is formatted as
            JSON or YAML stored as a RawString.
      s3Location:
        allOf:
        - $ref: '#/definitions/types.S3Location'
        description: Information about the location of a revision stored in Amazon
          S3.
      string_:
        allOf:
        - $ref: '#/definitions/types.RawString'
        description: |-
          Information about the location of an Lambda deployment revision stored as a
          RawString.

          Deprecated: RawString and String revision type are deprecated, use
          AppSpecContent type instead.
    type: object
  types.RevisionLocationType:
    enum:
    - S3
    - GitHub
    - String
    - AppSpecContent
    type: string
    x-enum-varnames:
    - RevisionLocationTypeS3
    - RevisionLocationTypeGitHub
    - RevisionLocationTypeString
    - RevisionLocationTypeAppSpecContent
  types.S3Location:
    properties:
      bucket:
        description: The name of the Amazon S3 bucket where the application revision
          is stored.
        type: string
      bundleType:
        allOf:
        - $ref: '#/definitions/types.BundleType'
        description: |-
          The file type of the application revision. Must be one of the following:

            - tar : A tar archive file.

            - tgz : A compressed tar archive file.

            - zip : A zip archive file.

            - YAML : A YAML-formatted file.

            - JSON : A JSON-formatted file.
      etag:
        description: |-
          The ETag of the Amazon S3 object that represents the bundled artifacts for the
          application revision.

          If the ETag is not specified as an input parameter, ETag validation of the
          object is skipped.
        type: string
      key:
        description: |-
          The name of the Amazon S3 object that represents the bundled artifacts for the
          application revision.
        type: string
      version:
        description: |-
          A specific version of the Amazon S3 object that represents the bundled
          artifacts for the application revision.

          If the version is not specified, the system uses the most recent version by
          default.
        type: string
    type: object
  types.TargetInstances:
    properties:
      autoScalingGroups:
        description: |-
          The names of one or more Auto Scaling groups to identify a replacement
          environment for a blue/green deployment.
        items:
          type: string
        type: array
      ec2TagSet:
        allOf:
        - $ref: '#/definitions/types.EC2TagSet'
        description: |-
          Information about the groups of Amazon EC2 instance tags that an instance must
          be identified by in order for it to be included in the replacement environment
          for a blue/green deployment. Cannot be used in the same call as tagFilters .
      tagFilters:
        description: |-
          The tag filter key, type, and value used to identify Amazon EC2 instances in a
          replacement environment for a blue/green deployment. Cannot be used in the same
          call as ec2TagSet .
        items:
          $ref: '#/definitions/types.EC2TagFilter'
        type: array
    type: object
host: localhost:8080
info:
  contact:
    name: API Support
  description: This is the API documentation for DeployView, a deployment management
    tool.
  title: DeployView API
  version: "1.0"
paths:
  /deployments:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: List of deployments
          schema:
            items:
              type: string
            type: array
        "400":
          description: Invalid request method
          schema:
            type: string
      tags:
      - deployments
  /deployments/{account}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Account ID
        in: path
        name: account
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of deployments
          schema:
            items:
              type: string
            type: array
        "400":
          description: Invalid request method
          schema:
            type: string
      tags:
      - deployments
    post:
      consumes:
      - application/json
      parameters:
      - description: Account ID
        in: path
        name: account
        required: true
        type: string
      - description: Deployment details
        in: body
        name: deployment
        required: true
        schema:
          $ref: '#/definitions/codedeploy.CreateDeploymentInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/codedeploy.CreateDeploymentOutput'
        "400":
          description: Error decoding request body
          schema:
            type: string
      tags:
      - deployments
schemes:
- http
swagger: "2.0"
